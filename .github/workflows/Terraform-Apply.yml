name: 'Terraform: Apply'

on:
  push:
    branches:
      - main
    paths: 
      - 'Infra/**'
  schedule:
    - cron: "20 0 * * 0"  # This cron expression triggers the workflow every Sunday at midnight + 20 mins to update the ssh key being rotated.

  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      #first run after forking the repo TF_VAR_enable_ssh_key should be set to false. 
      TF_VAR_enable_ssh_key: true # update this to true only after the keyvault was created and the secrets were set.
      WORKING_DIRECTORY: './Infra' 
    # Default settings for all `run` commands in this job
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.7.4
     
      - name: 'Check Enable SSH Key Flag'
        id: check_ssh_key
        run: |
          echo "enable_ssh_key=${{ env.TF_VAR_enable_ssh_key }}" >> $GITHUB_OUTPUT

      - name: 'Terraform Init'
        run: terraform init 
      
      - name: 'Terraform Force Data Fetch'
        if: ${{ steps.check_ssh_key.outputs.enable_ssh_key == 'true' }}
        run: |
          terraform taint azurerm_virtual_machine.runner_vm
          # terraform state rm 'data.azurerm_key_vault_secret.public_key' #> /dev/null
        

      - name: 'Terraform Plan'
        run: terraform plan -no-color #> /dev/null
      - name: 'Terraform Apply'
        run: terraform apply -auto-approve -no-color #> /dev/null 

